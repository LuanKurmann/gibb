import{Ba as h,b as n,h as c,k as l}from"./chunk-CPYGXC5A.js";import{h as i}from"./chunk-FK42CRUA.js";var g=class o{constructor(e){this.supabase=e;this.loadScheduledTests()}scheduledTestsSubject=new n([]);scheduledTests$=this.scheduledTestsSubject.asObservable();loadScheduledTests(){return i(this,null,function*(){try{let e=yield this.supabase.getCurrentUser();if(!e)return;let{data:t,error:r}=yield this.supabase.client.from("scheduled_tests").select("*").eq("user_id",e.id).order("scheduled_date",{ascending:!0});if(r){console.error("Error loading scheduled tests:",r),(r.code==="PGRST116"||r.message.includes("does not exist"))&&(console.warn("scheduled_tests table does not exist yet. Please run the migration."),this.scheduledTestsSubject.next([]));return}let a=t.map(s=>({id:s.id,userId:s.user_id,subjectId:s.subject_id,title:s.title,description:s.description,testType:s.test_type,scheduledDate:s.scheduled_date,duration:s.duration,weight:s.weight,semester:s.semester,status:s.status,gradeId:s.grade_id,createdAt:s.created_at,updatedAt:s.updated_at}));this.scheduledTestsSubject.next(a)}catch(e){console.error("Error loading scheduled tests:",e)}})}addScheduledTest(e){return i(this,null,function*(){try{let t=yield this.supabase.getCurrentUser();if(!t)return!1;let{data:r,error:a}=yield this.supabase.client.from("scheduled_tests").insert({user_id:t.id,subject_id:e.subjectId,title:e.title,description:e.description,test_type:e.testType,scheduled_date:e.scheduledDate,duration:e.duration,weight:e.weight,semester:e.semester,status:e.status,grade_id:e.gradeId}).select().single();return a?(console.error("Error adding scheduled test:",a),(a.code==="PGRST116"||a.message.includes("does not exist"))&&console.warn("scheduled_tests table does not exist yet. Please run the migration first."),!1):(yield this.loadScheduledTests(),!0)}catch(t){return console.error("Error adding scheduled test:",t),!1}})}updateScheduledTest(e,t){return i(this,null,function*(){try{let{error:r}=yield this.supabase.client.from("scheduled_tests").update({title:t.title,description:t.description,test_type:t.testType,scheduled_date:t.scheduledDate,duration:t.duration,weight:t.weight,semester:t.semester,status:t.status,grade_id:t.gradeId,updated_at:new Date().toISOString()}).eq("id",e);return r?(console.error("Error updating scheduled test:",r),!1):(yield this.loadScheduledTests(),!0)}catch(r){return console.error("Error updating scheduled test:",r),!1}})}deleteScheduledTest(e){return i(this,null,function*(){try{let{error:t}=yield this.supabase.client.from("scheduled_tests").delete().eq("id",e);return t?(console.error("Error deleting scheduled test:",t),!1):(yield this.loadScheduledTests(),!0)}catch(t){return console.error("Error deleting scheduled test:",t),!1}})}convertTestToGrade(e,t){return i(this,null,function*(){try{let r=yield this.supabase.getCurrentUser();if(!r)return!1;let s=this.scheduledTestsSubject.value.find(p=>p.id===e);if(!s)return!1;let d={userId:r.id,subjectId:s.subjectId,type:s.testType==="exam"?"exam":"individual",value:t,semester:s.semester,name:s.title,weight:s.weight,dateTaken:s.scheduledDate,description:s.description,duration:s.duration?.toString()},{data:T,error:u}=yield this.supabase.client.from("grades").insert({user_id:d.userId,subject_id:d.subjectId,type:d.type,value:d.value,semester:d.semester,name:d.name,weight:d.weight,date_taken:d.dateTaken,description:d.description,duration:d.duration}).select().single();return u?(console.error("Error creating grade:",u),!1):(yield this.updateScheduledTest(e,{status:"completed",gradeId:T.id}),!0)}catch(r){return console.error("Error converting test to grade:",r),!1}})}getUpcomingTests(e=7){let t=this.scheduledTestsSubject.value,r=new Date,a=new Date;return a.setDate(r.getDate()+e),t.filter(s=>{let d=new Date(s.scheduledDate);return s.status==="scheduled"&&d>=r&&d<=a}).sort((s,d)=>new Date(s.scheduledDate).getTime()-new Date(d.scheduledDate).getTime())}getTestsBySubject(e){return this.scheduledTestsSubject.value.filter(t=>t.subjectId===e)}getTestsByMonth(e,t){return this.scheduledTestsSubject.value.filter(r=>{let a=new Date(r.scheduledDate);return a.getFullYear()===e&&a.getMonth()===t})}isDateAvailable(e){let t=this.scheduledTestsSubject.value,r=new Date(e).toDateString();return!t.some(a=>new Date(a.scheduledDate).toDateString()===r&&a.status==="scheduled")}formatTestType(e){return{exam:"Pr\xFCfung",test:"Test",presentation:"Pr\xE4sentation",project:"Projekt",homework:"Hausaufgabe"}[e]||e}getTestTypeColor(e){return{exam:"bg-red-100 text-red-800",test:"bg-blue-100 text-blue-800",presentation:"bg-purple-100 text-purple-800",project:"bg-green-100 text-green-800",homework:"bg-yellow-100 text-yellow-800"}[e]||"bg-gray-100 text-gray-800"}static \u0275fac=function(t){return new(t||o)(l(h))};static \u0275prov=c({token:o,factory:o.\u0275fac,providedIn:"root"})};export{g as a};
